"I.think.that.flying.a.kite.is.silly." ,
"A.brisk.walk.has.sometimes.made.me.feel.good.all.over.")
cols_temperature <-c ("Sunbathing.isn.t.really.more.fun.than.lying.down.indoors." , "The.warmth.of.an.open.fireplace.hasn.t.especially.soothed.and.calmed.me." , "I.ve.never.cared.to.sunbathe..it.just.makes.me.hot.")
cols_general <-c("There.just.are.not.many.things.that.I.have.ever.really.enjoyed.doing.")
cols_smell <- c ("When.I.have.walked.by.a.bakery..the.smell.of.fresh.bread.has.often.made.me.hungry." ,
"When.I.pass.by.flowers..I.have.often.stopped.to.smell.them.")
# this question was not categorized I.have.usually.finished.my.bath.or.shower.as.quickly.as.possible.just.to.get.it.over.with.
# Reverse code
PASS[cols_reverse] <- lapply(PASS[cols_reverse], reverseCode, min=0, max=1)
# Add sub-scores and total to main df
ratings$PASS_total <- apply(PASS,1, sum) # total PAS scores
ratings$PASS_sex <- apply(PASS[cols_sex], 1,sum)
ratings$PASS_eating <- apply(PASS[cols_eating],1, sum)
ratings$PASS_touch <-apply(PASS[cols_touch],1, sum)
ratings$PASS_feeling <- apply(PASS[cols_feeling],1, sum)
ratings$PASS_sound <- apply(PASS[cols_sound],1, sum)
ratings$PASS_vision <- apply(PASS[cols_vision],1, sum)
ratings$PASS_movement <- apply(PASS[cols_movement],1, sum)
ratings$PASS_temperature <- apply(PASS[cols_temperature],1, sum)
ratings$PASS_general <- apply(PASS[cols_general],1, sum)
ratings$PASS_smell <- apply(PASS[cols_smell],1, sum)
ratings$PASS_noaud <- ratings$PASS_total - ratings$PASS_sound
mean(ratings$PASS_noaud) + sd(ratings$PASS_noaud)
hist(ratings$PASS_noaud)
ggplot(data=ratings, aes(x=PASS_noaud, y=eBMRQ_total))+
geom_point() +
geom_hline(yintercept = 67, linetype="dotted") +
geom_vline(xintercept = 16.84785, linetype="dotted")
master <- pivot_longer(ratings, !ResponseId & !eBMRQ_total:PASS_noaud)
master$stim <- sub("_.*$", "", master$name)
master$stim <- sub("X", "", master$stim)
master$rating <-sub("X[[:digit:]]+_", "", master$name)
master$pre_post <- NA
i = 1:nrow(master)
for (x in i){
if (master$rating[x] == "Q397") {
master$rating[x] <- "liking"
master$pre_post[x] <- "pre"
} else if (master$rating[x] == "Q454") {
master$rating[x] <- "liking"
master$pre_post[x] <- "post"
} else if (master$rating[x] == "Q406") {
master$rating[x] <- "speech"
master$pre_post[x] <- "post"
}else if (master$rating[x] == "Q402") {
master$rating[x] <- "speech"
master$pre_post[x] <- "pre"
}
}
master$stim <- as.numeric(master$stim)
master$stim_type <- NA
for (x in i){
if (master$stim[x] <= 24) {
master$stim_type[x] <- "illusion"
} else if (master$stim[x] > 24) {
master$stim_type[x] <- "control"
}
}
unique(ratings$value)
for (x in i){
if (master$value[x] == "1 (I don't enjoy this sound at all)") {
master$value[x] <- "1"
} else if (master$value[x] == "10  (completely song-like)") {
master$value[x] <- "10"
} else if (master$value[x] == "10 (completely song-like)") {
master$value[x] <- "10"
}else if (master$value[x] == "1 (completely speech-like)") {
master$value[x] <- "1"
} else if (master$value[x] == "1 (I don't enjoy this sound at all") {
master$value[x] <- "1"
} else if (master$value[x] == "10 (I enjoy this sound very much)") {
master$value[x] <- "10"
}
}
master$value <- as.numeric(master$value)
master$stim <- as.factor(master$stim)
View(master)
#write
write.csv(master, file='../data/master.csv')
library(matchIt)
install.packages("matchIt")
install.packages("MatchIt")
library(MatchIt)
library(tidyverse)
master <- read.csv(file="../data/master.csv")
ggplot(data=ratings, aes(x=PASS_noaud, y=eBMRQ_total))+
geom_point() +
geom_hline(yintercept = 67, linetype="dotted") +
geom_vline(xintercept = 16.84785, linetype="dotted") +
theme_classic()
ggplot(data=master, aes(x=PASS_noaud, y=eBMRQ_total))+
geom_point() +
geom_hline(yintercept = 67, linetype="dotted") +
geom_vline(xintercept = 16.84785, linetype="dotted") +
theme_classic()
View(master)
master %>%
distinct(ResponseId) %>%
ggplot(aes(x=PASS_noaud, y=eBMRQ_total))+
geom_point() +
geom_hline(yintercept = 67, linetype="dotted") +
geom_vline(xintercept = 16.84785, linetype="dotted") +
theme_classic()
distinct(master$ResponseId)
master %>% distinct(ResponseId, .keep_all = TRUE)
master %>% distinct(ResponseId, .keep_all = TRUE) %>%
ggplot(aes(x=PASS_noaud, y=eBMRQ_total))+
geom_point() +
geom_hline(yintercept = 67, linetype="dotted") +
geom_vline(xintercept = 16.84785, linetype="dotted") +
theme_classic()
general_hedonics <- subset(df, PASS_noaud<16.84785)
View(master)
general_hedonics <- subset(master, PASS_noaud<16.84785)
musical_anhedonics <- subset(general_hedonics, BMRQ_total< 67)
musical_anhedonics <- subset(general_hedonics, eBMRQ_total< 67)
general_hedonics <-
master %>% distinct(ResponseId, .keep_all = TRUE) %>%
subset(master, PASS_noaud<16.84785)
general_hedonics <-
master %>% distinct(ResponseId, .keep_all = TRUE) %>%
subset(PASS_noaud<16.84785)
musical_anhedonics <- subset(general_hedonics, eBMRQ_total< 67)
View(musical_anhedonics)
hedonics <- subset(general_hedonics, BMRQ_total > 69)
hedonics <- subset(general_hedonics, eBMRQ_total > 69)
hedonics$group = "Hedonic"
general_hedonics <-
master %>%
subset(PASS_noaud<16.84785)
musical_anhedonics <- subset(general_hedonics, eBMRQ_total< 67)
musical_anhedonics$group = "Anhedonic"
hedonics <- subset(general_hedonics, eBMRQ_total > 69)
hedonics$group = "Hedonic"
potential_matchedcontrols <- rbind(musical_anhedonics, hedonics)
potential_matchedcontrols$group = ifelse(potential_matchedcontrols$group == 'Anhedonic', 1, 0)
potential_matchedcontrols$group <- as.factor(potential_matchedcontrols$group)
matched <- MatchIt::matchit(group ~ Gold_perceptualabilities  + PASS_noaud, data=master, method='nearest', ratio=1)
matched <- MatchIt::matchit(group ~ Gold_perceptualabilities + PASS_noaud, data=potential_matchedcontrols, method='nearest', ratio=1)
summary(matched)
df.match <- MatchIt::match.data(matched)[1:ncol(master)]
df.match$group = ifelse(df.match$group == '0', "Matched Controls", "Musical Anhedonics")
potential_matchedcontrols <- rbind(musical_anhedonics, hedonics)
potential_matchedcontrols$group = ifelse(potential_matchedcontrols$group == 'Anhedonic', 1, 0)
potential_matchedcontrols$group <- as.factor(potential_matchedcontrols$group)
matched <- MatchIt::matchit(group ~ Gold_perceptualabilities + PASS_noaud, data=potential_matchedcontrols, method='nearest', ratio=1)
matched <- MatchIt::matchit(group ~ Gold_perceptualabilities + PASS_noaud, data=potential_matchedcontrols, method='nearest', ratio=1)
summary(matched)
df.match <- MatchIt::match.data(matched)[1:ncol(potential_matchedcontrols)]
df.match$group = ifelse(df.match$group == '0', "Matched Controls", "Musical Anhedonics")
controls <- subset(df.match, group=="Matched Controls")
anhedonics <- subset(df.match, group=="Musical Anhedonics")
range(df$MBEA_total)
sd(anhedonics$What.is.your.age.)
View(anhedonics)
write.csv(df.match, file="../data/anhedonics_matchedcontrols.csv')
write.csv(df.match, file="../data/anhedonics_matchedcontrols.csv')
write.csv(df.match, file="../data/anhedonics_matchedcontrols.csv")
write.csv(df.match, file="../data/anhedonics_matchedcontrols.csv")
df.match %>% distinct(ResponseId, .keep_all = TRUE) %>%
ggplot(aes(x=PASS_noaud, y=eBMRQ_total))+
geom_point() +
geom_hline(yintercept = 67, linetype="dotted") +
geom_vline(xintercept = 16.84785, linetype="dotted") +
theme_classic()
library(tidyverse)
library(lme4)
library(lmerTest)
master <- read.csv(file='../data/master.csv')
matched <- read.csv(file='../data/anhedonics_matchedcontrols.csv')
View(master)
liking_master <- master %>%
subset(rating=="liking")
liking_matched <- matched %>%
subset(rating=="liking")
speech_master <- master %>%
subset(rating=="speech")
liking_master <- master %>%
subset(rating=="liking")
liking_matched <- matched %>%
subset(rating=="liking")
speech_master <- master %>%
subset(rating=="speech")
speech_matched <- matched %>%
subset(rating=="speech")
View(speech_master)
#did the s2s illusion work in entire sample?
m1 <- lmer(data=speech_master, value ~ stim_type*pre_post + (1|ResponseId) + (1|stim))
summary(m1)
contrasts(speech_master$stim_type) <- c(-0.5,0.5)
speech_master$stim_type <- as.factor(speech_master$stim_type)
speech_master$pre_post <- as.factor(speech_master$pre_post)
contrasts(speech_master$stim_type) <- c(-0.5,0.5)
contrasts(speech_master$pre_post) <- c(-0.5,0.5)
m1 <- lmer(data=speech_master, value ~ stim_type*pre_post + (1|ResponseId) + (1|stim))
summary(m1)
contrasts(speech_master$stim_type)
contrasts(speech_master$pre_post)
contrasts(speech_master$pre_post) <- c(0.5,-0.5)
m1 <- lmer(data=speech_master, value ~ stim_type*pre_post + (1|ResponseId) + (1|stim))
summary(m1)
m1 <- lmer(data=speech_master, scale(value) ~ stim_type*pre_post + (stim_type*pre_post|ResponseId) + (1|stim))
summary(m1)
liking_master$stim_type <- as.factor(liking_master$stim_type)
liking_master$pre_post <- as.factor(liking_master$pre_post)
contrasts(liking_master$stim_type) <- c(-0.5,0.5)
contrasts(liking_master$pre_post) <- c(0.5,-0.5)
m2 <- lmer(data=liking_master, scale(value) ~ stim_type*pre_post + (stim_type*pre_post|ResponseId) + (1|stim))
summary(m2)
ggplot(data=speech_master, aes(x=pre_post, y=value))+
geom_point()
ggplot(data=speech_master, aes(x=pre_post, y=value))+
stat_summary()
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type))+
stat_summary()
stat_summary(fun.data = 'mean_se', geom = 'errorbar', width = 0.2, alpha=0.5) +
stat_summary(fun.data = 'mean_se', geom = 'pointrange', alpha=0.5)
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
stat_summary(fun.data = 'mean_se', geom = 'errorbar', width = 0.2, alpha=0.5) +
stat_summary(fun.data = 'mean_se', geom = 'pointrange', alpha=0.5)
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
stat_summary(fun.data = 'mean_se', geom = 'errorbar', width = 0.1, alpha=0.5) +
stat_summary(fun.data = 'mean_se', geom = 'pointrange', alpha=0.5)
speech_master %>%
subset(stim_type=="control") %>%>
speech_master %>%
subset(stim_type=="control") %>%
lmer(data=speech_master, scale(value) ~ pre_post + (pre_post|ResponseId) + (1|stim))
speech_master %>%
subset(stim_type=="control") %>%
lmer(scale(value) ~ pre_post + (pre_post|ResponseId) + (1|stim))
speech_master_control <- speech_master %>%
subset(stim_type=="control")
lmer(data=speech_master, scale(value) ~ pre_post + (pre_post|ResponseId) + (1|stim))
m1 <- lmer(data=speech_master, scale(value) ~ pre_post + (pre_post|ResponseId) + (1|stim))
summary(m1)
speech_matched$stim_type <- as.factor(speech_matched$stim_type)
speech_matched$pre_post <- as.factor(speech_matched$pre_post)
contrasts(speech_matched$stim_type) <- c(-0.5,0.5)
contrasts(speech_matched$pre_post) <- c(0.5,-0.5)
m1 <- lmer(data=speech_matched, scale(value) ~ stim_type*pre_post*group + (stim_type*pre_post|ResponseId) + (1|stim))
summary(m1)
contrasts(speech_matched$group)
speech_matched$group <- as.factor(speech_matched$group)
contrasts(speech_matched$group)
contrasts(speech_matched$group) <- c(0.5,-0.5)
m1 <- lmer(data=speech_matched, scale(value) ~ stim_type*pre_post*group + (stim_type*pre_post|ResponseId) + (1|stim))
m1 <- lmer(data=speech_matched, scale(value) ~ stim_type*pre_post*group + (pre_post|ResponseId) + (1|stim))
summary(m1)
m1 <- lmer(data=speech_matched, scale(value) ~ stim_type*group + (pre_post|ResponseId) + (1|stim))
m1 <- lmer(data=speech_matched, scale(value) ~ stim_type*group + (stim_type|ResponseId) + (1|stim))
summary(m1)
m2 <- lmer(data=speech_matched, scale(value) ~ pre_post*group + (pre_post|ResponseId) + (1|stim))
summary(m2)
m1 <- lmer(data=speech_matched, scale(value) ~ stim_type*pre_post*group + (stim_type*pre_post|ResponseId) + (1|stim))
summary(m1)
m1 <- lmer(data=speech_matched, scale(value) ~ stim_type*pre_post*group + (stim_type|ResponseId) + (1|stim))
summary(m1)
m1 <- lmer(data=speech_matched, scale(value) ~ stim_type*pre_post*group + (pre_post|ResponseId) + (1|stim))
summary(m1)
liking_matched$stim_type <- as.factor(liking_matched$stim_type)
liking_matched$pre_post <- as.factor(liking_matched$pre_post)
liking_matched$group <- as.factor(liking_matched$group)
contrasts(liking_matched$stim_type) <- c(-0.5,0.5)
contrasts(liking_matched$pre_post) <- c(0.5,-0.5)
contrasts(liking_matched$group) <- c(0.5,-0.5)
m1 <- lmer(data=liking_matched, scale(value) ~ stim_type*pre_post*group + (pre_post|ResponseId) + (1|stim))
summary(m1)
m1 <- lmer(data=liking_matched, scale(value) ~ stim_type*pre_post*group + (pre_post*stim_type|ResponseId) + (1|stim))
summary(m1)
m2 <- lmer(data=liking_master, scale(value) ~ stim_type*pre_post*eBMRQ_total + (stim_type*pre_post|ResponseId) + (1|stim))
summary(m2)
m1 <- lmer(data=speech_master, scale(value) ~ stim_type*pre_post + (stim_type*pre_post|ResponseId) + (stim_type*pre_post|stim))
summary(m1)
m1 <- lmer(data=speech_master, scale(value) ~ stim_type*pre_post + (stim_type + pre_post|ResponseId) + (stim_type*pre_post|stim))
m1 <- lmer(data=speech_master, scale(value) ~ stim_type*pre_post + (stim_type*pre_post|ResponseId) + (1|stim))
summary(m1)
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
stat_summary(fun.data = 'mean_se', geom = 'errorbar', width = 0.1, alpha=0.5) +
stat_summary(fun.data = 'mean_se', geom = 'pointrange', alpha=0.5)
library(MatchIt)
library(tidyverse)
master <- read.csv(file="../data/master.csv")
master %>% distinct(ResponseId, .keep_all = TRUE) %>%
ggplot(aes(x=PASS_noaud, y=eBMRQ_total))+
geom_point() +
geom_hline(yintercept = 67, linetype="dotted") +
geom_vline(xintercept = 16.84785, linetype="dotted") +
theme_classic()
master %>% distinct(ResponseId, .keep_all = TRUE) %>%
ggplot(aes(x=PASS_noaud, y=eBMRQ_total))+
geom_point() +
geom_hline(yintercept = 67, linetype="dotted") +
geom_vline(xintercept = 16.84785, linetype="dotted") +
theme_classic() +
xlab("PAS Scores (Sound Items Removed") +
ylab("Total eBMRQ Scores")
master %>% distinct(ResponseId, .keep_all = TRUE) %>%
ggplot(aes(x=PASS_noaud, y=eBMRQ_total))+
geom_point() +
geom_hline(yintercept = 67, linetype="dotted") +
geom_vline(xintercept = 16.84785, linetype="dotted", color="Red") +
theme_classic() +
xlab("PAS Scores (Sound Items Removed)") +
ylab("Total eBMRQ Scores")
master %>% distinct(ResponseId, .keep_all = TRUE) %>%
ggplot(aes(x=PASS_noaud, y=eBMRQ_total))+
geom_point() +
geom_hline(yintercept = 67, linetype="dotted", color="blue") +
geom_vline(xintercept = 16.84785, linetype="dotted", color="red") +
theme_classic() +
xlab("PAS Scores (Sound Items Removed)") +
ylab("Total eBMRQ Scores")
master %>% distinct(ResponseId, .keep_all = TRUE) %>%
ggplot(aes(x=PASS_noaud, y=eBMRQ_total))+
geom_point(alpha=0.5) +
geom_hline(yintercept = 67, linetype="dotted", color="blue") +
geom_vline(xintercept = 16.84785, linetype="dotted", color="red") +
theme_classic() +
xlab("PAS Scores (Sound Items Removed)") +
ylab("Total eBMRQ Scores")
master %>% distinct(ResponseId, .keep_all = TRUE) %>%
ggplot(aes(x=PASS_noaud, y=eBMRQ_total))+
geom_point(alpha=0.75) +
geom_hline(yintercept = 67, linetype="dotted", color="blue") +
geom_vline(xintercept = 16.84785, linetype="dotted", color="red") +
theme_classic() +
xlab("PAS Scores (Sound Items Removed)") +
ylab("Total eBMRQ Scores")
master %>% distinct(ResponseId, .keep_all = TRUE) %>%
ggplot(aes(x=PASS_noaud, y=eBMRQ_total))+
geom_point(alpha=0.65) +
geom_hline(yintercept = 67, linetype="dotted", color="blue") +
geom_vline(xintercept = 16.84785, linetype="dotted", color="red") +
theme_classic() +
xlab("PAS Scores (Sound Items Removed)") +
ylab("Total eBMRQ Scores")
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
stat_summary(fun.data = 'mean_se', geom = 'errorbar', width = 0.1, alpha=0.5) +
stat_summary(fun.data = 'mean_se', geom = 'pointrange', alpha=0.5)
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
stat_summary(fun.data = 'mean_se', geom = 'errorbar', width = 0.1, alpha=0.5) +
stat_summary(fun.data = 'mean_se', geom = 'pointrange', alpha=0.5) +
theme_classic()
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
stat_summary(fun.data = 'mean_se', geom = 'errorbar', width = 0.1, alpha=0.5) +
stat_summary(fun.data = 'mean_se', geom = 'pointrange', alpha=0.5) +
theme_classic() +
geom_point()
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
stat_summary(fun.data = 'mean_se', geom = 'errorbar', width = 0.1, alpha=0.5) +
stat_summary(fun.data = 'mean_se', geom = 'pointrange', alpha=0.5) +
theme_classic() +
geom_jitter()
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
geom_jitter() +
stat_summary(fun.data = 'mean_se', geom = 'errorbar', width = 0.1, alpha=0.5) +
stat_summary(fun.data = 'mean_se', geom = 'pointrange', alpha=0.5) +
theme_classic()
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
ggdist::geom_slab() +
stat_summary(fun.data = 'mean_se', geom = 'errorbar', width = 0.1, alpha=0.5) +
stat_summary(fun.data = 'mean_se', geom = 'pointrange', alpha=0.5) +
theme_classic()
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
ggdist::geom_dotsinterval() +
stat_summary(fun.data = 'mean_se', geom = 'errorbar', width = 0.1, alpha=0.5) +
stat_summary(fun.data = 'mean_se', geom = 'pointrange', alpha=0.5) +
theme_classic()
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
ggdist::geom_dotsinterval() +
stat_summary(fun.data = 'mean_sd', geom = 'errorbar', width = 0.1, alpha=0.5) +
stat_summary(fun.data = 'mean_sd', geom = 'pointrange', alpha=0.5) +
theme_classic()
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
ggdist::geom_dotsinterval() +
stat_summary(fun.data = 'mean_se', geom = 'errorbar', width = 0.1, alpha=0.5) +
stat_summary(fun.data = 'mean_se', geom = 'pointrange', alpha=0.5) +
theme_classic()
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
# ggdist::geom_dotsinterval() +
stat_summary(fun.data = 'mean_se', geom = 'errorbar', width = 0.1, alpha=0.5) +
stat_summary(fun.data = 'mean_se', geom = 'pointrange', alpha=0.5) +
theme_classic() +
ylab("Speech Rating") +
xlab("Pre vs. Post Repetition")
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
# ggdist::geom_dotsinterval() +
stat_summary(fun.data = 'mean_se', geom = 'errorbar', width = 0.1, alpha=0.5) +
stat_summary(fun.data = 'mean_se', geom = 'pointrange', alpha=0.5) +
theme(legend.position = "none")+
theme_classic() +
ylab("Speech Rating") +
xlab("Pre vs. Post Repetition")
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
# ggdist::geom_dotsinterval() +
stat_summary(fun.data = 'mean_se', geom = 'errorbar', width = 0.1, alpha=0.5) +
stat_summary(fun.data = 'mean_se', geom = 'pointrange', alpha=0.5) +
theme_classic()+
theme(legend.position = "none")+
ylab("Speech Rating") +
xlab("Pre vs. Post Repetition")
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
# ggdist::geom_dotsinterval() +
stat_summary(fun.data = 'mean_se', geom = 'errorbar', width = 0, alpha=0.5) +
stat_summary(fun.data = 'mean_se', geom = 'pointrange', alpha=0.5) +
theme_classic()+
theme(legend.position = "none")+
ylab("Speech Rating") +
xlab("Pre vs. Post Repetition")
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
# ggdist::geom_dotsinterval() +
stat_summary(fun.data = 'mean', geom = 'errorbar', width = 0, alpha=0.5) +
stat_summary(fun.data = 'mean', geom = 'pointrange', alpha=0.5) +
theme_classic()+
theme(legend.position = "none")+
ylab("Speech Rating") +
xlab("Pre vs. Post Repetition")
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
# ggdist::geom_dotsinterval() +
stat_summary(fun.data = 'mean', geom = 'errorbar', width = 0, alpha=0.5) +
stat_summary(fun.data = 'mean_cl_normal', geom = 'pointrange', alpha=0.5) +
theme_classic()+
theme(legend.position = "none")+
ylab("Speech Rating") +
xlab("Pre vs. Post Repetition")
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
# ggdist::geom_dotsinterval() +
stat_summary(fun.data = 'mean_cl_normal', geom = 'errorbar', width = 0, alpha=0.5) +
stat_summary(fun.data = 'mean_cl_normal', geom = 'pointrange', alpha=0.5) +
theme_classic()+
theme(legend.position = "none")+
ylab("Speech Rating") +
xlab("Pre vs. Post Repetition")
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
# ggdist::geom_dotsinterval() +
stat_summary(fun.data = 'mean_se', geom = 'errorbar', width = 0, alpha=0.5) +
stat_summary(fun.data = 'mean_se', geom = 'pointrange', alpha=0.5) +
theme_classic()+
theme(legend.position = "none")+
ylab("Speech Rating") +
xlab("Pre vs. Post Repetition")
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
# ggdist::geom_dotsinterval() +
stat_summary(fun.data = 'mean_cl_normal', geom = 'errorbar', width = 0, alpha=0.5) +
stat_summary(fun.data = 'mean_cl_normal', geom = 'pointrange', alpha=0.5) +
theme_classic()+
theme(legend.position = "none")+
ylab("Speech Rating") +
xlab("Pre vs. Post Repetition")
speech_master$pre_post <- factor(speech_master$pre_post, levels = c("pre", "post"))
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
# ggdist::geom_dotsinterval() +
stat_summary(fun.data = 'mean_cl_normal', geom = 'errorbar', width = 0, alpha=0.5) +
stat_summary(fun.data = 'mean_cl_normal', geom = 'pointrange', alpha=0.5) +
theme_classic()+
theme(legend.position = "none")+
ylab("Speech Rating") +
xlab("Pre vs. Post Repetition")
speech_master$pre_post <- factor(speech_master$pre_post, levels = c("Pre", "Post"))
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
# ggdist::geom_dotsinterval() +
stat_summary(fun.data = 'mean_cl_normal', geom = 'errorbar', width = 0, alpha=0.5) +
stat_summary(fun.data = 'mean_cl_normal', geom = 'pointrange', alpha=0.5) +
theme_classic()+
theme(legend.position = "none")+
ylab("Speech Rating") +
xlab("Pre vs. Post Repetition")
speech_master$stim_type <- as.factor(speech_master$stim_type)
speech_master$pre_post <- as.factor(speech_master$pre_post)
contrasts(speech_master$stim_type) <- c(-0.5,0.5)
contrasts(speech_master$pre_post) <- c(0.5,-0.5)
speech_master$pre_post <- factor(speech_master$pre_post, levels = c("pre", "post"))
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
# ggdist::geom_dotsinterval() +
stat_summary(fun.data = 'mean_cl_normal', geom = 'errorbar', width = 0, alpha=0.5) +
stat_summary(fun.data = 'mean_cl_normal', geom = 'pointrange', alpha=0.5) +
theme_classic()+
theme(legend.position = "none")+
ylab("Speech Rating") +
xlab("Pre vs. Post Repetition")
liking_master <- master %>%
subset(rating=="liking")
liking_matched <- matched %>%
subset(rating=="liking")
speech_master <- master %>%
subset(rating=="speech")
speech_matched <- matched %>%
subset(rating=="speech")
#did the s2s illusion work in entire sample?
speech_master$stim_type <- as.factor(speech_master$stim_type)
speech_master$pre_post <- as.factor(speech_master$pre_post)
contrasts(speech_master$stim_type) <- c(-0.5,0.5)
contrasts(speech_master$pre_post) <- c(0.5,-0.5)
speech_master$pre_post <- factor(speech_master$pre_post, levels = c("pre", "post"))
m1 <- lmer(data=speech_master, scale(value) ~ stim_type*pre_post + (stim_type*pre_post|ResponseId) + (1|stim))
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
# ggdist::geom_dotsinterval() +
stat_summary(fun.data = 'mean_cl_normal', geom = 'errorbar', width = 0, alpha=0.5) +
stat_summary(fun.data = 'mean_cl_normal', geom = 'pointrange', alpha=0.5) +
theme_classic()+
theme(legend.position = "none")+
ylab("Speech Rating") +
xlab("Pre vs. Post Repetition")
ggplot(data=speech_master, aes(x=pre_post, y=value, color=stim_type)) +
# ggdist::geom_dotsinterval() +
stat_summary(fun.data = 'mean_cl_normal', geom = 'errorbar', width = 0, alpha=0.5) +
stat_summary(fun.data = 'mean_cl_normal', geom = 'pointrange', alpha=0.5) +
theme_classic()+
# theme(legend.position = "none")+
ylab("Speech Rating") +
xlab("Pre vs. Post Repetition")
